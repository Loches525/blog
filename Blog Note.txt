1. 安装并激活虚拟环境activate
2. 安装Django, pip install django==1.10.6
3. 建立Django工程, django-admin startproject blogproject
4. 修改setting文件以支持中文与中国时区, LANGUAGE_CODE = 'zh-hans', TIME_ZONE = 'Asia/Shanghai'
5. 建立blog应用, python manage.py startapp blog
6. 在setting中注册blog应用, INSTALLED_APPS = [..., 'blog']
7. 编写model代码
   from django.db import models
   class Category(models.Model):
	name = models.CharField(max_length=100)
   class Post(models.Model):
	excerpt = models.CharField(max_length=200, blank=True)
	category = models.ForeignKey(Category)
	tags = models.ManyToManyField(Tag, blank=True)
	author = models.ForeignKey(User)
8. 迁移数据库
	python manage.py makemigrations
	python manage.py migrate
9. 插入数据，并且为了all方法显示更加人性化，可在每个类后面重写__str__方法
	def __str__(self):
		return self.name
10. 为了兼容Python2,可在每个类的开头加上装饰器
	@python_2_unicode_compatible (引入自from django.utils.six import python_2_unicode_compatible)
11. 编写视图函数
    from django.http import HttpResponse
    from .model import Post
    
    def index(request):
	post_list = Post.objects.all().order_by('-created_time')
	return render(request, 'blog/index.html', context={'post_list': post_list})
12. 配置项目URL
    from django.conf.urls import url, include
    from django.contrib import admin

    urlpatterns = [
	url(r'^admin/', admin.site.urls),
	url(r'', include('blog.urls')
    ]
13. 使用Django模板系统，在项目根目录中新建templates文件夹，在其中再新建与app同名的文件夹，再在其中新建html文件。
14. 配置模板文件所在路径，在setting文件中加入如下的语句
    TEMPLATES = [
	{
	    ...
	    'DIRS': [os.path.join(BASE_DIR, 'templates')],
	    ...
	},
    ]
15. 处理静态文件， 在应用目录下新建static文件夹，再在其中新建与app同名的文件夹，再在其中放入诸如css和js的静态文件
16. 为了能在模板中使用{% static %}标签，需要在HTML文件的最顶部加入{% load staticfiles %}
17. 使用static标签的原因是因为方便修改，它是在setting文件中通过STATIC_URL = '/static/'指定的，最终可以渲染    
    成/static/blog/css/pace.css。如果要改变前缀static，只需要在setting文件中修改STATIC_URL的值便可。
18. 修改模板使之显示文章数据，可通过{% %}模板标签遍历数据读取
19. 在Django Admin后台发布文章
	创建后台管理员账户  python manage.py createsuperuser 按提示输入账户密码邮箱便可
    在Admin后台注册模型
	from django.contrib import admin
	from .models import Post, Category, Tag
	
	admin.site.register(Post)
	admin.site.register(Category)
	admin.site.register(Tag)
    定制Admin后台
	在以上文件中加入定制类, 让后台显示想要的column
	class PostAdmin(admin.ModelAdmin):
	     list_display = ['title', 'created_time', 'modified_time', 'category', 'author']
20. 在blog下的urls.py中配置项目URL, app_name = 'blog'为了告诉Django当下的urls.py属于blog应用，这种技术叫视图函数命名空间
    form django.conf.urls import url
    from . import views

    app_name = 'blog'
    urlpatterns = [
	url(r'^$', views.index, name='index'),
	url(r'^post/(?P<pk>[0-9]+)/$', views.detail, name='detail'),
    ]
21. 编写detail视图函数
    from django.shortcuts import render, get_object_or_404
    from .models import Post

    def index(request):
	#...
    def detail(request, pk):
	post = get_object_or_404(Post, pk=pk)
	return render(request, 'blog/detail.html', context={'post': post})
22. 在templates目录下的app文件夹目录下放入detail.html
23. 模板继承，将html中相同的部分抽离出来放到base.html中，并将此文件放在templates目录下，其内容可如下,其中block/endblock是占位标签，
    可让继承的html文件自定义里边的内容
    ...
    <main class="col-md-8">
	{% bloack mian %}
	{% endblock main %}
    </main>
    <aside class="col-md-4">
	{% block toc %}
	{% endblock toc %}
	...
    </aside>
    ...
24. 继承的时候需要再html文件的顶部加入{% extends 'base.html' %}语句，如此可将base.html中的内容继承过来，并且可在block/endblock占    
    位区中自定义所需的代码
25. 侧边栏： 使用自定义模板标签(不是在视图函数中)
    在blog应用下新建一个templatetags文件夹，然后在此文件夹下新建一个__init__.py文件，是这个文件夹成为一个Python包，然后同样在当前文      
    件夹下新建一个blog_tags.py文件，这个文件存放自定义的模板标签代码
    from ..models import Post
    
    def get_recent_posts(num=5):
	return Post.objects.all().order_by('-created_time')[:num]
    因为这只是一个纯Python函数，Django在模板中不知道怎么使用它，为了能够通过{% get_recent_posts %}的语法在模板中调用这个函数，必须      
    按照Django的规定注册这个函数为模板标签，先导入template模块，然后实例化一个template.Library，并将函数get_recent_posts装饰为                     register.simple_tag，具体方法如下：
    from django import template
    from ..models import Post

    register = template.Library()
    
    @register.simple_tag
    def get_recent_posts(num=5):
	return Post.objects.all().order_by('-created_time')[:num]
    并且需在base.html的顶部加入语句{% load blog_tags %}
    然后在下面可以用类似{% get_recent_posts as recent_post_list %}的语句取出post数据
26. 归档页面，视图函数如下
    def archives(request, year, month):
	post_list = Post.objects.filter(created_time__year=year, created_time__month=month).order_by('-created_time')
	return render(request, 'blog/index.html', context={'post_list': post_list})
    配置URL url(r'^archive/(?P<year>[0-9]{4})/(?P<month>[0-9]{1,2}/$', views.archive, name='archives')
    修改模板中超链接href的属性，使用户点击链接之后跳转到文章归档页面：
    <a href="{% url 'blog:archives' date.year date.month %}">这种方式是为了避免硬编码
27. 分类页面，视图函数如下
    def category(request, pk):
	cate = get_object_or_404(Category, pk)
	post_list = Post.objects.filter(category=cate).order_by('-created_time')
	return render(request, 'blog/index.html', context={'post_list': post_list})
    配置URL url(r'^category/(?P<pk>[0-9]+)/$', views.category, name='category')
28. 评论， 因为评论是一个比较独立的功能，Django提倡独立的功能最好是创建一个应用。因此需在项目根目录中创建另一个应用comments，用以存    
    放和评论相关的代码
    python manage.py startapp comments
    注册comments到setting文件中 INSTALLED_APPS = [ ..., 'comments',]
29. 设计评论的数据库模型
    from django.db import models
    from django.utils.six import python_2_unicode_compatible

    @python_2_unicode_compatible
    class Comments(models.Model):
	name = models.CharField(max_length=100)
	email = models.EmailField(max_length=255)
	url = models.URLField(blank=True)
	text = modesl.TextField()
	created_time = models.DatetimeField(auto_now_add=True)

	post = models.ForeignKey('blog.Post')

	def __str__(self):
	    return self.text[:20]
    迁移数据库python manage.py makemigrations, python manage.py migrate
30. 编写评论表单代码，在comments目录中新建一个forms.py文件，用以存放表单代码。要用Django的表单功能，需先导入forms模块，Django的表单      
    必须继承自forms.Form或者forms.ModelForm类，如果表单对应有一个数据库模型，（此处评论表单对应着评论模型）,所以使用ModelForm类会简      
    单很多
    from django import forms
    from .models import Comment

    class CommentForm(forms.ModelForm):
	class Meta:
	    model = Comment
	    fields = ['name', 'email', 'url', 'text']
31. 编写评论视图函数，comments目录下的views.py。当redirect函数接收一个模型的实例时，它会调用这个模型实例的get_absolute_url，然后重    
    定向到get_absoluste_url方法返回的url。
    from django.shortcuts import render, get_object_or_404, redirect
    from blog.models import Post
    from .models import Comment
    from .forms import CommentForm

    def post_comment(request, post_pk):
	post = get_object_or_404(Post, pk=post_pk)
	if request.method == POST:
	    form = CommentForm(request.POST)
	    if form.is_valid():
	    	comment = form.save(commit=False)
	    	comment.post = post
	    	comment.save()
	    	return redirect(post)
	    else:
	    	comment_list = post.comment_set.all()
	    	context = {'post': post, 'form': form, 'comment_list': comment_list}
		return render(request, 'blog/detail.html', context=context)
	return redirect(post)
32. 配置URL，在comment应用中新建一个urls.py文件
    from django.conf.urls import url
    from . import views

    app_name = 'comments'
    urlpatterns = [ url(r'^comment/post/(?<post_pk>[0-9]+)/$', views.post_comment, name='post_comment'), ]
    在项目目录的urls.py中引入这个文件
    urlpatterns = [
	url(r'', include('comments.urls')),
    ]
33. 文章详情页的视图函数
    from django.shorcuts import render, get_object_or_404
    from comments.forms import CommentForm
    from .models import Post, Category

    def detail(request, pk):
	post = get_object_or_404(Post, pk=pk)
	form = CommentForm()
	comment_list = post.commnent_set.all()
	context = {'post': post, 'form':form, 'comment_list': comment_list}
	return render(request, 'blog/deatil.html', context=context)
34. 渲染前段表单, {{ form.name.errors }}, {{ form.email.errors }}等渲染表单对应字段的错误（如果有的话）。即用户填了格式不对的内容，    
    错误就会相应显示出来
    <form action="{% url 'comments:post_comment' post.pk %} method="post" class="comment-form">
	{% csrf_token %}
	<div class="row">
	   <div class="col-md-4">
	      <label for="{{ form.name.id_for_labe }}">名字： </label>
	      {{ form.name }}
	      {{ form.name.errors }}
	   </div>
    	   <div class="col-md-4">
           <label for="{{ form.email.id_for_label }}">邮箱：</label>
              {{ form.email }}
              {{ form.email.errors }}
           </div>
           <div class="col-md-4">
              <label for="{{ form.url.id_for_label }}">URL：</label>
              {{ form.url }}
              {{ form.url.errors }}
           </div>
           <div class="col-md-12">
              <label for="{{ form.text.id_for_label }}">评论：</label>
              {{ form.text }}
              { form.text.errors }}
              <button type="submit" class="comment-btn">发表</button>
           </div>
        </div>    <!-- row -->
    </form>
35. 显示评论的内容，通过for循环从comment_list中取出全部的评论数据并显示
    <ul class="comment-list list-unstyled">
	{% for comment in comment-list %}
	<li class="comment-item">
	    <span class="nickname">{{ comment.name }}</span>
	    <time class="submmit-date">{{ comment.created_date }}</time>
	    <div class="text">
		{{ comment.text }}
	    </div>
	</li>
	{% empty %}
	暂无评论
	{% endfor %}
    </ul>
36. 因为只要是返回的文章列表，基本都是逆序排列， 所以各个视图都有类似于Post.objects.all().order_by('-created_time')的语句，为了避    
    免重复，可以在Post模型中制定Post的自然排列方式。Django允许在models.Model的子类里定义一个Meta的内部类，这个内部类通过指定一些属性    
    来规定这个类该有的一些属性。例如制定排列顺序可以用ordering。
    class Post(models.Model):
	...
	class Meta:
	    ordering = ['-created_time']
37. 完善首页跳转链接
    <header id="site-header">
	<div class="row">
	    <div class="logo">
	        <h1><a href="{% url 'blog/index' %}"><b>Black</b> &amp; White</a></h1>
	    </div>
	</div>
    </header>
38. 显示评论的数量， 模型管理器(comment_set是一个特殊的模型管理器)有一个count方法，返回的是数量。因此可以直接在模板中调用这个方法
    {{ post.comment_set.count }}来显示文章的评论数量。
39. 显示文章的阅读量， 可在Post中加入新字段来储存阅读量,PositiveIntegerField的值只允许为正整数或0。然后在加入增加阅读量的方法，同样    
    的最好是由Post模型自己完成。注意方法中使用了updated_fields参数来告诉Django只更新数据库中的views字段的值，以提高效率。修改模型之    
    后记得迁移数据库
    class Post(models.Model):
	...
	views = modesl.PositiveIntegerField(default=0)
	...
	def increase_views(self):
	    self.views += 1
	    self.save(update_fields=['views'])
    在视图函数detail中调用增加函数，因为一访问文章就会调用detail函数，所以可以在这里去调用。
    def detail(request, pk):
	...
	post.increase_views()
	...
    在模板中显示阅读量，需修改index.html和detail.html，分别是
    <div class="entry-meta">
	...
	<span class="views-count"><a href="{{ post.get_absolute_url }}">{{ post.views }} 阅读</a></span>
    </div>

    <div class="entry-meta">
	...
	<span class="views-count"><a href="#">{{ post.views }} 阅读</a></span>
    </div>
40. 自动生成文章摘要，可以在Post模型中复写save方法，在数据被保存到数据库之前，先从body字段摘取N个字符保存到excerpt字段中，从而实现自    
    动摘要的目的。最后再调用父类的save方法将数据保存到数据库中。
    import markdown
    from django.utils.html import strip_tags

    class Post(modesl.Model):
	...
	body = modesl.TextField()
	excerpt = models.CharField(max_length=200, blank=True)
	...

	def save(self







