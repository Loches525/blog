1. 安装pip install virtualenv, virtualenv path并激活虚拟环境activate
2. 安装Django, pip install django==1.10.6
3. 建立Django工程, django-admin startproject blogproject
4. 修改setting文件以支持中文与中国时区, LANGUAGE_CODE = 'zh-hans', TIME_ZONE = 'Asia/Shanghai'
5. 建立blog应用, python manage.py startapp blog
6. 在setting中注册blog应用, INSTALLED_APPS = [..., 'blog']
7. 编写model代码
   from django.db import models
   class Category(models.Model):
	name = models.CharField(max_length=100)
   class Post(models.Model):
	excerpt = models.CharField(max_length=200, blank=True)
	category = models.ForeignKey(Category)
	tags = models.ManyToManyField(Tag, blank=True)
	author = models.ForeignKey(User)
8. 迁移数据库
	python manage.py makemigrations
	python manage.py migrate
9. 插入数据，并且为了all方法显示更加人性化，可在每个类后面重写__str__方法
	def __str__(self):
		return self.name
10. 为了兼容Python2,可在每个类的开头加上装饰器
	@python_2_unicode_compatible (引入自from django.utils.six import python_2_unicode_compatible)
11. 编写视图函数
    from django.http import HttpResponse
    from .model import Post
    
    def index(request):
	post_list = Post.objects.all().order_by('-created_time')
	return render(request, 'blog/index.html', context={'post_list': post_list})
12. 配置项目URL
    from django.conf.urls import url, include
    from django.contrib import admin

    urlpatterns = [
	url(r'^admin/', admin.site.urls),
	url(r'', include('blog.urls')
    ]
13. 使用Django模板系统，在项目根目录中新建templates文件夹，在其中再新建与app同名的文件夹，再在其中新建html文件。
14. 配置模板文件所在路径，在setting文件中加入如下的语句
    TEMPLATES = [
	{
	    ...
	    'DIRS': [os.path.join(BASE_DIR, 'templates')],
	    ...
	},
    ]
15. 处理静态文件， 在应用目录下新建static文件夹，再在其中新建与app同名的文件夹，再在其中放入诸如css和js的静态文件
16. 为了能在模板中使用{% static %}标签，需要在HTML文件的最顶部加入{% load staticfiles %}
17. 使用static标签的原因是因为方便修改，它是在setting文件中通过STATIC_URL = '/static/'指定的，最终可以渲染成/static/blog/css/pace.css。
    如果要改变前缀static，只需要在setting文件中修改STATIC_URL的值便可。
18. 修改模板使之显示文章数据，可通过{% %}模板标签遍历数据读取
19. 在Django Admin后台发布文章
	创建后台管理员账户  python manage.py createsuperuser 按提示输入账户密码邮箱便可
    在Admin后台注册模型
	from django.contrib import admin
	from .models import Post, Category, Tag
	
	admin.site.register(Post)
	admin.site.register(Category)
	admin.site.register(Tag)
    定制Admin后台
	在以上文件中加入定制类, 让后台显示想要的column
	class PostAdmin(admin.ModelAdmin):
	     list_display = ['title', 'created_time', 'modified_time', 'category', 'author']
20. 在blog下的urls.py中配置项目URL, app_name = 'blog'为了告诉Django当下的urls.py属于blog应用，这种技术叫视图函数命名空间
    form django.conf.urls import url
    from . import views

    app_name = 'blog'
    urlpatterns = [
	url(r'^$', views.index, name='index'),
	url(r'^post/(?P<pk>[0-9]+)/$', views.detail, name='detail'),
    ]
21. 编写detail视图函数
    from django.shortcuts import render, get_object_or_404
    from .models import Post

    def index(request):
	#...
    def detail(request, pk):
	post = get_object_or_404(Post, pk=pk)
	return render(request, 'blog/detail.html', context={'post': post})
22. 在templates目录下的app文件夹目录下放入detail.html
23. 模板继承，将html中相同的部分抽离出来放到base.html中，并将此文件放在templates目录下，其内容可如下,其中block/endblock是占位标签，
    可让继承的html文件自定义里边的内容
    ...
    <main class="col-md-8">
	{% bloack mian %}
	{% endblock main %}
    </main>
    <aside class="col-md-4">
	{% block toc %}
	{% endblock toc %}
	...
    </aside>
    ...
24. 继承的时候需要再html文件的顶部加入{% extends 'base.html' %}语句，如此可将base.html中的内容继承过来，并且可在block/endblock占位区中自定义所需     的代码
25. 侧边栏： 使用自定义模板标签(不是在视图函数中)
    在blog应用下新建一个templatetags文件夹，然后在此文件夹下新建一个__init__.py文件，是这个文件夹成为一个Python包，然后同样在当前文件夹下新建一个     log_tags.py文件，这个文件存放自定义的模板标签代码
    from ..models import Post
    
    def get_recent_posts(num=5):
	return Post.objects.all().order_by('-created_time')[:num]
    因为这只是一个纯Python函数，Django在模板中不知道怎么使用它，为了能够通过{% get_recent_posts %}的语法在模板中调用这个函数，必须按照Django的规     定注册这个函数为模板标签，先导入template模块，然后实例化一个template.Library，并将函数get_recent_posts装饰为register.simple_tag，具体方法如     下：
    from django import template
    from ..models import Post

    register = template.Library()
    
    @register.simple_tag
    def get_recent_posts(num=5):
	return Post.objects.all().order_by('-created_time')[:num]
    并且需在base.html的顶部加入语句{% load blog_tags %}
    然后在下面可以用类似{% get_recent_posts as recent_post_list %}的语句取出post数据
26. 归档页面，视图函数如下，由于这里created_time.year和created_time.month是作为函数的参数列表，所以Django要求把点替换成两个下划线。
    def archives(request, year, month):
	post_list = Post.objects.filter(created_time__year=year, created_time__month=month).order_by('-created_time')
	return render(request, 'blog/index.html', context={'post_list': post_list})
    配置URL url(r'^archive/(?P<year>[0-9]{4})/(?P<month>[0-9]{1,2}/$', views.archive, name='archives')
    修改模板中超链接href的属性，使用户点击链接之后跳转到文章归档页面：
    <a href="{% url 'blog:archives' date.year date.month %}">这种方式是为了避免硬编码
27. 分类页面，视图函数如下
    def category(request, pk):
	cate = get_object_or_404(Category, pk)
	post_list = Post.objects.filter(category=cate).order_by('-created_time')
	return render(request, 'blog/index.html', context={'post_list': post_list})
    配置URL url(r'^category/(?P<pk>[0-9]+)/$', views.category, name='category')
28. 评论， 因为评论是一个比较独立的功能，Django提倡独立的功能最好是创建一个应用。因此需在项目根目录中创建另一个应用comments，
    以存放和评论相关的代码
    python manage.py startapp comments
    注册comments到setting文件中 INSTALLED_APPS = [ ..., 'comments',]
29. 设计评论的数据库模型
    from django.db import models
    from django.utils.six import python_2_unicode_compatible

    @python_2_unicode_compatible
    class Comments(models.Model):
	name = models.CharField(max_length=100)
	email = models.EmailField(max_length=255)
	url = models.URLField(blank=True)
	text = modesl.TextField()
	created_time = models.DatetimeField(auto_now_add=True)

	post = models.ForeignKey('blog.Post')

	def __str__(self):
	    return self.text[:20]
    迁移数据库python manage.py makemigrations, python manage.py migrate
30. 编写评论表单代码，在comments目录中新建一个forms.py文件，用以存放表单代码。要用Django的表单功能，需先导入forms模块，Django的表单必须继承自         forms.Form或者forms.ModelForm类，如果表单对应有一个数据库模型，（此处评论表单对应着评论模型）,所以使用ModelForm类会简单很多
    from django import forms
    from .models import Comment

    class CommentForm(forms.ModelForm):
	class Meta:
	    model = Comment
	    fields = ['name', 'email', 'url', 'text']
31. 编写评论视图函数，comments目录下的views.py。当redirect函数接收一个模型的实例时，它会调用这个模型实例的get_absolute_url，然后重定向到             get_absoluste_url方法返回的url。
    from django.shortcuts import render, get_object_or_404, redirect
    from blog.models import Post
    from .models import Comment
    from .forms import CommentForm

    def post_comment(request, post_pk):
	post = get_object_or_404(Post, pk=post_pk)
	if request.method == POST:
	    form = CommentForm(request.POST)
	    if form.is_valid():
	    	comment = form.save(commit=False)
	    	comment.post = post
	    	comment.save()
	    	return redirect(post)
	    else:
	    	comment_list = post.comment_set.all()
	    	context = {'post': post, 'form': form, 'comment_list': comment_list}
		return render(request, 'blog/detail.html', context=context)
	return redirect(post)
32. 配置URL，在comment应用中新建一个urls.py文件
    from django.conf.urls import url
    from . import views

    app_name = 'comments'
    urlpatterns = [ url(r'^comment/post/(?<post_pk>[0-9]+)/$', views.post_comment, name='post_comment'), ]
    在项目目录的urls.py中引入这个文件
    urlpatterns = [
	url(r'', include('comments.urls')),
    ]
33. 文章详情页的视图函数
    from django.shorcuts import render, get_object_or_404
    from comments.forms import CommentForm
    from .models import Post, Category

    def detail(request, pk):
	post = get_object_or_404(Post, pk=pk)
	form = CommentForm()
	comment_list = post.commnent_set.all()
	context = {'post': post, 'form':form, 'comment_list': comment_list}
	return render(request, 'blog/deatil.html', context=context)
34. 渲染前端表单, {{ form.name.errors }}, {{ form.email.errors }}等渲染表单对应字段的错误（如果有的话）。
    即用户填了格式不对的内容，错误就会相应显示出来
    <form action="{% url 'comments:post_comment' post.pk %} method="post" class="comment-form">
	{% csrf_token %}
	<div class="row">
	   <div class="col-md-4">
	      <label for="{{ form.name.id_for_labe }}">名字： </label>
	      {{ form.name }}
	      {{ form.name.errors }}
	   </div>
    	   <div class="col-md-4">
           <label for="{{ form.email.id_for_label }}">邮箱：</label>
              {{ form.email }}
              {{ form.email.errors }}
           </div>
           <div class="col-md-4">
              <label for="{{ form.url.id_for_label }}">URL：</label>
              {{ form.url }}
              {{ form.url.errors }}
           </div>
           <div class="col-md-12">
              <label for="{{ form.text.id_for_label }}">评论：</label>
              {{ form.text }}
              { form.text.errors }}
              <button type="submit" class="comment-btn">发表</button>
           </div>
        </div>    <!-- row -->
    </form>
35. 显示评论的内容，通过for循环从comment_list中取出全部的评论数据并显示
    <ul class="comment-list list-unstyled">
	{% for comment in comment-list %}
	<li class="comment-item">
	    <span class="nickname">{{ comment.name }}</span>
	    <time class="submmit-date">{{ comment.created_date }}</time>
	    <div class="text">
		{{ comment.text }}
	    </div>
	</li>
	{% empty %}
	暂无评论
	{% endfor %}
    </ul>
36. 因为只要是返回的文章列表，基本都是逆序排列， 所以各个视图都有类似于Post.objects.all().order_by('-created_time')的语句，为了避免重复，可以在     Post模型中制定Post的自然排列方式。Django允许在models.Model的子类里定义一个Meta的内部类，这个内部类通过指定一些属性来规定这个类该有的一些属性。     例如制定排列顺序可以用ordering。
    class Post(models.Model):
	...
	class Meta:
	    ordering = ['-created_time']
37. 完善首页跳转链接
    <header id="site-header">
	<div class="row">
	    <div class="logo">
	        <h1><a href="{% url 'blog/index' %}"><b>Black</b> &amp; White</a></h1>
	    </div>
	</div>
    </header>
38. 显示评论的数量， 模型管理器(comment_set是一个特殊的模型管理器)有一个count方法，返回的是数量。因此可以直接在模板中调用这个方法
    {{ post.comment_set.count }}来显示文章的评论数量。
39. 显示文章的阅读量， 可在Post中加入新字段来储存阅读量,PositiveIntegerField的值只允许为正整数或0。然后在加入增加阅读量的方法，同样的最好是由Post     模型自己完成。注意方法中使用了updated_fields参数来告诉Django只更新数据库中的views字段的值，以提高效率。修改模型之后记得迁移数据库
    class Post(models.Model):
	...
	views = modesl.PositiveIntegerField(default=0)
	...
	def increase_views(self):
	    self.views += 1
	    self.save(update_fields=['views'])
    在视图函数detail中调用增加函数，因为一访问文章就会调用detail函数，所以可以在这里去调用。
    def detail(request, pk):
	...
	post.increase_views()
	...
    在模板中显示阅读量，需修改index.html和detail.html，分别是
    <div class="entry-meta">
	...
	<span class="views-count"><a href="{{ post.get_absolute_url }}">{{ post.views }} 阅读</a></span>
    </div>

    <div class="entry-meta">
	...
	<span class="views-count"><a href="#">{{ post.views }} 阅读</a></span>
    </div>
40. 自动生成文章摘要，可以在Post模型中复写save方法，在数据被保存到数据库之前，先从body字段摘取N个字符保存到excerpt字段中，从而实现自动摘要的目的。     最后再调用父类的save方法将数据保存到数据库中。strip_tags方法是为了将HTML的标签去掉。
    import markdown
    from django.utils.html import strip_tags

    class Post(modesl.Model):
	...
	body = modesl.TextField()
	excerpt = models.CharField(max_length=200, blank=True)
	...

	def save(self， *args, **kwargs):
	    if not self.excerpt:
		md = markdown.Mrkdown(extensions=[
		    'markdown.extensions.extra',
		    'markdown.extensions.codehilite',
		])
		self.excerpt = strip_tags(md.cover(self.body))[:54]
	    super(Post, self).save(*args, **kwargs)
    然后在模板中使用{{ post.excerpt }}来显示摘要的值
41. 使用类视图将相同的逻辑代码抽取出来，写成一系列的通用视图函数，这是Django推荐的做法，因为能减少视图函数的重复代码。
    针对从数据库中获取某个模型列表数据的视图，Django专门提供了一个ListView类视图，首先把index视图函数改造成类视图函数
    原来的：
    def index(request):
	post_list = Post.objects.all()
	return render(request, 'blog/index.html', context={'post_list': post_list})
    改造后：
    from django.views.generic import ListView
    class IndexView(ListView):
	model = Post
	template_name = 'blog/index.html'
	context_object_name = 'post_list'
    即只需指定model，模型数据列表保存的变量，模板文件这三样东西，然后ListView就会将其他获取、保存、渲染的工作都自动做好
42. 配置URL路径，因为IndexView是一个类，不能直接替代index函数，而将类视图转换成函数视图只需调用类视图的as_view()方法即可。
    app_name = 'blog'
    urlpattern = [ url(r'^$', views.IndexView.as_view(), name='index'),...]
43. 将category视图函数改写成类视图，和index视图函数不同的是，它获取的是某个分类下的全部文章，因此相比之下多了过滤的一步。
    在类视图中，从URL补货的命名组参数值保存在实例的kwargs属性里，非命名组参数值保存在实例的args属性里。因此这里需使用self.kwargs.get('pk')来获取       URL捕获的分类id值，然后再调用父类的get_queryset方法获得全部的文章列表，紧接着就对返回的结果调用filter方法来筛选该分类下的全部文章。
    另外，因为前三行代码和IndexView是一样的，为避免重复，可以直接继承IndexView。
    class CategoryView(ListView):
	model = Post
	template_name = 'blog/index.html'
	context_object_name = 'post_list'

	def get_queryset(self):
	    cate = get_object_or_404(Category, pk=self.kwargs.get('pk'))
	    return super(CategoryView, self).get_queryset().filter(category=cate)
44. 配置URL路径
    app_name = 'blog'
    urlpatterns = [ ... url(r'^category/(?P<pk>[0-9]+)/$', views.CategoryView.as_view(), name='category'),]
45. archivies视图函数改写成类视图跟category是一样的，另外Django还提供一个DetailView类视图，下面将detail类视图函数转换成等价的类视图                 PostDetailView。首先指定的一些属性值和ListView中是一样的，然后复写了get方法，这里对应这detai视图函数中将post的阅读量+1的那部分代码；然后又复写     了get_object方法，这对应这detail视图函数中根据文章的id(也就是pk)获取文章然后对post.body进行Markdown渲染的部分;最后又复写了get_context_data方     法，这部分对应这detail视图函数中生成评论表单、获取post下的评论列表的部分，它首先调用父类的get_context_data方法获得当前的上下文对象，然后更新再     返回给模板。其实，可以将get方法看成是detail视图函数，然后其它的get、get_object、get_context_data都是辅助方法，这些方法最终都在get方法中被调       用，这里没有看到是因为都隐含在super(PostDetailView,self).get(request, *args, **kwargs)之中，最终返回的响应就是get方法返回的HttpResponse对     象。
    from django.views.generic import ListView, DetailView
    class PostDetailView(DetailView):
	model = Post
	template_name = 'blog/detail.html'
	context_object_name = 'post'

        def get(self, request, *args, **kwargs):
	    response = super(PostDetailView, self).get(request, *args, **kwargs)
	    self.object.increase_views()
	    return response

	def get_object(self, queryset=None):
	    post = super(PostDetailView, sellf).get_object(queryset=None)
	    post.body = markdown(post.body, extensions=[ 'markdown.extensions.extra',
							 'markdown.extensions.codehilite',
							 'markdown.extensions.toc',
						       ])
	    return post

	def get_context_data(self, **kwargs):
	    context = super(PostDetaiView, self).get_context_data(**kwargs)
	    form = CommentForm()
	    comment_list = self.object.comment_set.all()
	    context.update({
		'form': form,
		'comment_list': comment_list
	    })
	    return context
46. Django Pagination分页功能, Django内置了Paginator类实现分页功能，这个类位于django.core.paginator.py，使用时导入便可。
    简单分页，所需变量：paginator(Paginator的实例),page_obj(当前请求页面分页对象)，is_paginated(是否已分页，超过两页才算),object_list(请求页面     的对象列表)。因为类视图ListView已经写好了分页逻辑，所以只需指定paginate_by(每页的文章数)属性来开启分页功能即可。
    class IndexView(ListView):
	model = Post
	template_name = 'blog/index.html
	context_object_name = 'post'
	paginate_by = 10
    模板中设置分页导航
    {% if is_paginated %}
    <div class="pagination-simple">
	{% if page_obj.has_previous %}
	  <a href="?page={{ page_obj.previous_page_number }}">上一页</a>
	{% endif %}
	<span class="current">第 {{ page_obj.number }} 页 / 共 {{ paginator.num_pages }} 页</span>
	{% if page_obj.has_next %}
	  <a href="?page={{ page_obj.next_page_number }}">下一页</a>
	{% endif %}
    </div>
    {% endif %}
47. 分页效果完善，使得(1.始终显示第一页和最后一页。2.当前页码高亮显示。3.显示当前页码前后几个连续的页码。4.如果两个页码号间还有其它页码，中间显示省     略号以提醒用户。）在类视图中传递模板变量给模板是通过get_context_data获得的，所以可以复写该方法，以便插入自定义的模板变量。首先得获得父类生成的传     递给模板的字典context，在context中有paginator,page_obj,is_paginated三个模板变量，由于context是字典，所以用get方法取出某个键对应的值，然后调     用自己写的pagination_data方法获得像是分页导航条需要的数据，并且调用context的update方法更新数据，最后返回
    class IndexView(ListView):
	model = Post
	template_name = 'blog/index.html'
	context_object_name = 'post_list'
	paginate_by = 10

	def get_context_data(self, **kwargs):
	    context = super().get_context_data(**kwargs)
	    paginator = context.get('paginator')
	    page = context.get('page_obj')
	    is_paginated = context.get('is_paginated')
	    pagination_data = self.pagination_data(paginator, page, is_paginated)
	    context.update(pagination_data)
	    return context

	def pagination_data(self, paginator, page, is_paginated):
	    if not is_paginated:
		return {}
	    left = []
	    right = []
	    left_has_more = False
	    right_has_more = False
	    first = False
	    last = False
	    page_number = page.number
	    total_pages = paginator.num_pages
	    page_range = paginator.page_range
	    if page_number == 1:
		right = page_range[page_number:page_number+2]
		if right[-1] < total_pages-1:
		    right_has_more = True
		if right[-1] < total_pages:
		    last = True
	    elif page_number == total_pages:
		left = page_range[(page_number - 3) if (page_number - 3) > 0 else 0:page_number - 1]
		if left[0] > 2:
		    left_has_more = True
		if left[0] > 1:
		    first = True
	    else:
		left = page_range[(page_number - 3) if (page_number - 3) > 0 else 0:page_number - 1]
		right = page_range[page_number:page_number+2]
		if left[0] > 2:
		    left_has_more = True
		if left[0] > 1:
		    first = True
		if right[-1] < total_pages - 1
		    right_has_more = True
		if right[-1] < total_pages
		    last = True
	    data = {
		'left': left,
		'right': right,
		'left_has_more': left_has_more
		'right_has_more': right_has_more
		'first': first
		'last': last
	    }
	    return data
48. 模板中设置分页导航，将导航条的七个数据一一展现即可
    {% if is_paginated %}
    <div class="pagination">
	{% if first %}
	    <a href="?page=1">1</a>
	{% endif %}
	{% if left %}
	    {% if left_has_more %}
		<span>...</span>
	    {% endif %}
	    {% for i in left %}
		<a href="?page={{ i }}">{{ i }}</a>
	    {% endfor %}
	{% endif %}
	<a href="?page={{ page_obj.number }}" style="color: red">{{ page_obj.number }}</a>
	{% if right %}
	    {% for i in right %}
		<a href="?page={{ i }}">{{ i }}</a>
	    {% endfor %}
        {% if right_has_more %}
	    <span>...</span>
	{% endif %}
	{% if last %}
	    <a href="page={{ paginator.num_pages }}">{{ paginator.num_pages }}</a>
	{% endif %}
    </div>
    {% endif %}

	=IFERROR(IF(MATCH(O432,$O:$O,0)=ROW(),1,0),0)
49. 使用Annotate统计各个分类下的文章数，只要是两个model类通过ForeignKey或者ManyToMany关联起来，就可以使用annotate方法来统计数量。                   Category.objects.annotate方法和Category.objects.all有点类似，它会返回数据库中全部Category的记录，同时可用count方法返回Category记录集合中每     条记录下的文章数，count方法接收一个和Category相关联的模型参数名(这里是Post，通过ForeignKey关联的，注意count的参数要小写),然后将返回的文章数保     存在num_posts属性中。最后还用filter方法将num_posts的值小于1的分类过滤掉，因为是函数中的参数，所以用双下划线，gt是django的查询表达式，意思是       greater than,条件意思就是num_posts>0
    blog/templatetags/blog_tags.py
   
    from django.db.models.aggregates import Count
    from blog.models import Category

    @register.simple_tag
    def get_categories():
	return Category.objects.annotate(num_posts=Count('post')).filter(num_posts__gt=0)
50. 在模板中引入新增的属性
    <ul>
	{% for category in category_list　%}
	<li>
	    <a href="{% url 'blog:category' category.pk %}">{{ category.name }}
		<span class="post-count">({{ category.num_posts }})</span>
	    </a>
	</li>
	{% empty %}
	暂无分类!
	{% endfor %}
    </ul>
51. 在model Post当中有一个Tags字段是用ManyToMany关联的Tags = models.ManyToManyField('Tag')，因此在统计标签下的文章数可以：
    from django.db.models.aggregates import Count
    from blog.models import Tag

    tag_list = Tag.objects.annotate(num_posts=Count('post'))    
52. 标签云，获取标签列表，代码和分类差不多一样
    blog/templatetags/blog_tags.py

    from ..models import Post, Category, Tag

    @register.simple_tag
    def get_tag():
	return Tag.objects.annotate(num_posts=Count('post')).filter(num_posts__gt=0)
53. 然后在模板中循环显示这些标签
    templates/base.html

    <div class="widget wdget-tag-cloud">
	<h3 class="widget-title">标签云</h3>
	{% get_tags as tag_list %}
	<ul>
	    {% for tag in tag_list %}
	    <li>
		<a href="#">{{ tag.name }}</a>
	    </li>
	    {% empty %}
	    暂无标签!
	    {% endfor %}
	</ul>
    </div>
54. 标签视图函数，同CategoryView一样，可以使用类视图
    blog/views.py

    class TagView(ListView):
	model = Post
	template_name = 'blog/index.html'
	context_object_name = 'post_list'

	def get_queryset(self):
	    tag = get_object_or_404(Tag, pk=self.kwargs.get('pk'))
	    return super(TagView, self).get_queryset().filter(tags=tag)
    绑定URL
    app_name = 'blog'
    urlpatterns = [
	...
	url(r'^tag/(?P<pk>[0-9]+)/$', views.TagView.as_view(), name='tag'),
	...
    ]
55. 设置标签跳转链接
    <a href="{% url 'blog:tag' tag.pk %}>{{ tag.name }}</a>
56. 编写模板代码，这里因为Post和Tag是多对多的关系，所以post.tags就可能有多个值，因此Django没有让post.tags返回全部标签，而是返回一个模型管理器(类似     于objects)，然后可以调用这个模型管理器的all方法，来获取这篇post下的全部标签列表。但是在模板中调用方法需要去掉括号。post.body是HTML代码，为防止     Django对其转义，需要加上safe标签。
    <div class="entry-content clearfix">
	{{ post.body|safe }}
	<div class="widget-tag-cloud">
	    <ul>
		{% for tag in post.tags.all %}
		    <li><a href="{% url 'blog:tag' tag.pk %}"># {{ tag.name }}</a></li>
		{% endfor %}
	    </ul>
	</div>
    </div>
57. RSS订阅,RSS是一种描述和同步网站内容的格式，它采用XML作为内容传递的格式，简单来说就是网站可以把内容包装成符合RSS标准的XML格式文档。如果博客网站都     支持RSS订阅，读者只需要一个聚合阅读器订阅博客，然后读者就可以在聚合器工具里看到全部博客的更新内容。Django内置了一些生成XML文档的方法，下面用这些     方法来创建RSS订阅文档。在blog应用的根目录下(models.py所在目录)新建一个feeds.py文件用以存放和RSS功能相关的代码。
    from django.contrib.syndication.views import Feed
    from .models import Post

    class AllPostRssFeed(Feed):
	title = "Django 博客教程演示项目"
	link = "/"
	description = "Django 博客教程演示项目测试文章"
	def items(self):
	    return Post.objects.all()
	def item_title(self, item):
	    return '[%s] %s' % (item.category, item.title)
	def item_description(self, item):
	    return item.body
    绑定URL
    from blog.feeds import AllPostRssFeed

    urlpatterns = [
	...
	url(r'^all/rss/$', AllPostRssFeed(), name='rss'),
	...
    ]
    修改模板代码，将RSS的URL添加到模板中,运行服务器，在侧边栏点击RSS订阅的链接，就会跳转到/all/rss/，会看到乱码，这是生成的RSS标准文档，是给RSS聚合    阅读器工具读取的。
    <div class="css">
	<a href="{% url 'rss' %}"><sapn class="ion-social-rss-outline"></span> RSS 订阅</a>
    </div>
58. Markdown自动生成文章目录，markdown.extension.toc是自动生成目录的拓展。在页面的任何地方生成目录，要先实例化一个markdown.Markdown类md，并传入     extensions参数。接着使用该实例的convert方法将post.body中的Markdown文本渲染成HTML文本。然后md就会多出一个toc属性，这个属性的值就是内容的目录。     注意post实例本身没有md属性,只是被动态添加了。
    def get_object(self, queryset=None):
	md = 'markdown.Markdown(extensions=[
	     'markdown.extensions.extra',
	     'markdown.extensions.codehilite',
	     'markdown.extensions.toc',
	)]
	post.body = md.convert(post.body)
	post.toc = md.toc
	return post
59. 模板中渲染文章的目录,safe标签是防止Django对其转义。
    {% block toc %}
	<div class="widget widget-cotent">
	    <h3 class="widget-title">文章目录</h3>
	    {{ post.toc|safe }}
	</div>
    {% endblock %}
60. 美化标题的锚点URL，因为我们的标题通常都是中文，Markdown没法处理，所以在URL上就忽略了标题的值，简单的在后面加了个_1的锚点值，为了解决这个问题，需     要修改一下传给extensions的参数。将markdown.extensions.toc改成TocExtension的实例，TocExtension在实例化时其slugify参数可以接受一个函数作为参     数，这个函数将被用于处理标题的锚点值，Markdown内置的处理方法不能处理中文标题，但是django.utils.text中的slugify方法可以处理。
    from django.utils.text import slugify
    from markdown.extensions.toc import TocExtension

    class PostDetailView(DetailView):
	...
	md = markdown.Markdown(extension=[
	    'markdown.extensions.extra',
	    'markdown.extensions.codehilite',
	    TocExtension(slugify=slugify),
	)]
	...
61. 简单全文搜索，博客文章通常包含标题和正文两部分，当用户输入关键词搜索后，我们希望为用户显示标题和正文中含有搜索关键词的全部文章。搜索流程如下：1.     用户输入搜索关键词，然后点击搜索按钮将关键词提交到服务器。2.服务器接收到关键词之后去数据库查找文章标题和正文含有该关键词的全部文章。3.服务器将查     询结果返回给用户。
    首先提供一个搜索表单给用户：
    base.html

    <form role="search" method="get" id="searchform" action="{% url 'blog:search' %}">
	<input type="search" name="q" placeholder="搜索" required>
	<button type="submit"><span class="ion-ios-search-strong"></span></button>
    </form>
62. 在blog/views.py中编写search视图函数。获取输入的关键词request.GET.get('q')，用户通过get方法提交的数据Django为我们奥存在request.GET里，因为在     html文件中定义了搜索框的名字是q，所以key是q。过滤条件Q(title__icontains=q),意思是标题中含有q，前缀i表示不区分大小写，icontains是查询表达式，     用法是在模型需要筛选的属性后面跟上两个下划线。Q对象用于包装查询表达式，作用是为了提供复杂的查询逻辑。
    form django.db.models import Q
    
    def search(request):
	q = request.GET.get('q')
	error_msg = ''

	if not q:
	    error_msg = "请输入关键词"
	    return render(request, 'blog/index.html', {'error_msg': error_msg})

	post_list = Post.objects.filter(Q(title__icontains=q) | Q(body__icontains=q))
	return render(request, 'blog/index.html', {'error_msg': error_msg, 'post_list': post_list})
63. 在模板中渲染搜索结果
    templates/blog/index.html

    {% extends 'base.html' %}
    {% block main %}
	{% if error_msg %}
	    <p>{{ error_msg }}</p>
	{% endif %}

	{% for post in post_list %}
	   ...
	{% empty %}
	    <div class="no-post">暂时还没有发布的文章!</div>
	{% endfor %}
    {% endblock main %}
    绑定URL
    urlpatterns = [
	url(r'^search/$', views.search, name='search'),
    ]
64. Django Haystack 全文检索与关键词高亮，django-haystack是一个专门提供搜索功能的django第三方应用，使用它可以安装一些必要的依赖,Whoosh,是一个有纯     Python实现的全文搜索引擎，没有二进制文件等，比较小巧，配置简单方便; Jieba，中文自然语言处理库，很好的支持中文的    分词。使用pip安装以上的包pip     install django-haystack whoosh jieba。 然后在setting的app中注册haystack，然后加入如下配置项：
    HAYSTACK_CONNECTIONS = {
	'default': {
	    'ENGINE': 'blog.whoosh_cn_backend.WhooshEngine',
	    'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
	},
    }
    HAYSTACK_SEARCH_RESULTS_PER_PAGE = 10
    HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
65. 处理数据，需要告诉django haystack使用那些数据建立索引以及如何存放索引。如果要对blog应用下的数据进行全文检索，做法是在blog应用下建立一个           search_indexes.py文件，然后建立一个XXIndex类(XX为含有被检索数据的类型，如这里的Post),并且继承SearchIndex和Indexable,这是django haystack的     规定。每个索引里面必须有且只有一个字段为document=True，这代表django haystack和搜索引擎将使用此字段的内容作为索引进行检索。注意，如果一个字段设     置了document=True,则一般约定此字段名为text,这是在SearchIndex里面的一贯命名，以防止后台混乱。
    blog/search_indexes.py

    from haystack import indexes
    from .models import Post

    class PostIndex(indexes.SearchIndex, indexes.Indexable):
	text = indexes.CharField(document=True, use_template=True)
	def get_model(self):
	    return Post
	def index_queryset(self, using=None):
	    return self.get_model().objects.all()
    并且，haystack提供了use_template=True在text字段中，这样会允许我们使用数据模板去建立搜索引擎索引的文件，比如索引里面存放Post的title字段。数据     模板的路径为templates/search/indexes/app/<model_name>_text.txt,例如：
    templates/search/indexes/blog/post_text.txt

    {{ object.title }}
    {{ object.body }}
    这个数据模板的作用是对Post.title、Post.body这两个字段建立索引，当检索的时候回对着两个字段做全文检索匹配。
66. 配置URL，以下url取代原来的url(r'^search/$', views.search, name='search'), 同时记得次修改搜索表单中的url
    urlpatterns = [
	url(r'^search/', include('haystack.urls')),
    ]
67. 创建搜索结果页面，haystack_search视图函数会将搜索结果传递给模板search/search.html，因此创建这个模板文件，对搜索结果进行渲染，以下代码是将搜索     结果分页展示，每一页展示的每篇文章包括标题，标题下的信息以及正文摘要，并且每篇都有在最下面添加一个"继续阅读"的按钮。在页面最下面有分页的按钮，其     中&laquo;表示向左的双箭头，&raquo;表示向右的双箭头。
    templates/search/search.html

    {% extends 'base.html' %}
    {% load highlight %}

    {% block main %}
	{% if query %}
	    {% for result in page.object_list %}
		<article class="post post-{{ result.object.pk }}">
		    <header class="entry-header">
			<h1 class="entry-title">
			    <a href="{{ result.object.get_absolute_url }}">{% highlight result.object.title with query %}</a>
			</h1>
			<div class="entry-meta">
			<span class="post-category">
			    <a href="{% url 'blog:category' reslut.object.category.pk %}">
				{{ result.object.category.name }}</a></span>
			    <span class="post-date"><a href="#">
				<time class="entry-date" datetime="{{ result.object.created_time }}">
				    {{ result.object.created_time }}</time></a></span>
			    <span class="post-author"><a href="#">{{ result.object.author }}</a></span>
			    <span class="comments-link">
			    <a href="{{ result.object.get_absolute_url }}#comment-area">
				{{ result.object.comment_set.count　}} 评论</a></span>
			    <span class="views-count"><a href="{{ result.object.get_absolute_url }}">
				{{ result.object.views }} 阅读</a></span>
			</div>
		    </header>
		    <div class="entry-content clearfix">
			<p>{% highlight result.object.body with query %}</p>
			<div class="read-more cl-effect-14">
			    <a href="{{ result.object.get_absolute_url }}" class="more-link">继续阅读
				<span class="meta-nav">——></span></a>
			</div>
		    </div>
		</article>
	    {% empty %}
	        <div class="no-post">没有搜索到你想要的结果! </div>
	    {% endfor %}
	    {% if page.has_previous or page.has_next %}
	        <div>
		    {% if page.has_previous %}
		        <a href="?q={{ query }}&amp;page={{ page.previous_page_number }}">{% endif %}&laquo; Previous
		    {% if page.has_previous %}</a>{% endif %}
		    |
		    {% if page.has_next %}<a href="?q={{ query }}&amp;page={{ page.next_page_number }}">{% endif %}Next &raquo;
		    {% if page.has_next %}</a>{% endif %}
	        </div>
	    {% endif %}
        {% else %}
	    请输入搜索关键词，例如django
        {% endif %}
    {% endblock main %}
68. 在base.html中为highlighted类指定样式
    <head>
	<title>Black &amp; White</title>
	...
	<stytle>
	    span.highlighted {
		color: red;
	    }
	</stytle>
	...
    </head>
69. django haystack实现关键词高亮显示只需要使用{% highlight %}模板标签即可。用法如下：
    # 使用默认值
    {% highlight result.summary with query %}

    # 这里我们为{{ result.summary }}里所有的{{ query }}指定了一个<div></div>标签，并且将class设置为highlight_me_please,
      以此通过CSS为{{ query }}添加高亮效果
    {% highlight result.summary with query html_tag "div" css_class "highlight_me_please" %}

    # 可以用max_length限制最终{{ result.summary }} 被高亮处理后的长度
    {% highlight result.summary with query max_length 40 %}
70. 修改搜索引擎为中文分词，django haystack中为Whoosh指定的分词器是英文分词器，可以换成jieba中文分词器。从安装的haystack中把                         haystack/backends/whoosh_backends.py文件拷贝到blog/下，重命名为whoosh_cn_backends.py(之前在setting文件中的HAYSTACK_CONNECTIONS指定的就是     这个文件)。然后在其中找到一行代码，修改之，修改之前先引入ChiniseAnalyzer
    whoosh_cn_backends.py

    from jieba.analyse import ChineseAnalyzer

    ...
    schema_fields[field_class.index_fieldname] = TEXT(stored=True, analyzer=ChineseAnalyzer(),field_boost=field_class.boost,                 sortable=True)
    最后，建立索引文件，只需在命令行中运行命令python manage.py rebuild_index















